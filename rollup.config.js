import typescript from '@rollup/plugin-typescript';
import { nodeResolve } from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import json from '@rollup/plugin-json';
import { readFileSync, writeFileSync } from 'fs';

const isProd = (process.env.BUILD === 'production');

const banner = 
`/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`;

const updateBuildNumber = () => ({
    name: 'update-build-number',
    writeBundle: () => {
        const buildInfoPath = 'src/buildInfo.json';
        const manifestPath = 'manifest.json';

        // Read and update build info
        const buildInfo = JSON.parse(readFileSync(buildInfoPath, 'utf8'));
        const updatedBuildInfo = {
            buildNumber: buildInfo.buildNumber + 1
        };
        writeFileSync(buildInfoPath, JSON.stringify(updatedBuildInfo, null, 2));

        // Update manifest
        const manifest = JSON.parse(readFileSync(manifestPath, 'utf8'));
        const [major, minor, patch] = manifest.version.split('.').map(Number);
        manifest.version = `${major}.${minor}.${patch}.${updatedBuildInfo.buildNumber}`;
        writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));

        console.log(`Build number incremented to ${updatedBuildInfo.buildNumber}`);
        console.log(`New version: ${manifest.version}`);
    },
});

export default {
  input: 'src/main.ts',
  output: {
    file: 'main.js',
    sourcemap: 'inline',
    sourcemapExcludeSources: isProd,
    format: 'cjs',
    exports: 'default',
    banner,
  },
  external: ['obsidian'],
  plugins: [
    typescript(),
    nodeResolve({ browser: true }),
    commonjs(),
    json(),
    updateBuildNumber(),
  ]
};