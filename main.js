/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class DMSSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Document Management System Settings' });
        new obsidian.Setting(containerEl)
            .setName('Proxy Notes Location')
            .setDesc('Specify the location for proxy notes. Leave empty to use the vault root.')
            .addText(text => text
            .setPlaceholder('/ or root')
            .setValue(this.plugin.settings.proxyNotesPath)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.proxyNotesPath = value;
            yield this.plugin.saveSettings();
            this.plugin.proxyNoteManager.updateProxyNotesPath(value);
        })));
    }
}

class DMSView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
    }
    getViewType() {
        return 'dms-view';
    }
    getDisplayText() {
        return 'DMS View';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            this.containerEl = this.contentEl.createDiv({ cls: 'dms-view-container' });
            this.createControls();
            this.createTable();
            this.updateView();
        });
    }
    createControls() {
        const controlsDiv = this.containerEl.createDiv({ cls: 'controls-container' });
        // Add Entry button
        const addEntryBtn = controlsDiv.createEl('button', { text: 'Add Entry', cls: 'control-button' });
        addEntryBtn.addEventListener('click', () => this.plugin.addOrEditEntry());
        // Search input
        this.searchInput = controlsDiv.createEl('input', { type: 'text', placeholder: 'Search entries...', cls: 'search-input' });
        this.searchInput.addEventListener('input', () => this.updateView());
        // Category filter
        this.categorySelect = controlsDiv.createEl('select', { cls: 'filter-select' });
        this.updateCategorySelect();
        this.categorySelect.addEventListener('change', () => this.updateView());
        // Tag filter
        this.tagSelect = controlsDiv.createEl('select', { cls: 'filter-select' });
        this.updateTagSelect();
        this.tagSelect.addEventListener('change', () => this.updateView());
        // Clear filters button
        const clearFiltersBtn = controlsDiv.createEl('button', { text: 'Clear Filters', cls: 'control-button' });
        clearFiltersBtn.addEventListener('click', () => this.clearAllFilters());
    }
    createTable() {
        this.tableElement = this.containerEl.createEl('table', { cls: 'dms-table' });
        const header = this.tableElement.createEl('thead').createEl('tr');
        ['Title', 'Summary', 'File Type', 'Size', 'Created Date', 'Categories', 'Tags', 'Audience', 'Actions'].forEach(text => {
            header.createEl('th', { text });
        });
        this.tableElement.createEl('tbody');
    }
    updateView() {
        const filteredEntries = this.getFilteredEntries();
        this.renderEntries(filteredEntries);
        this.updateActiveFilters();
    }
    getFilteredEntries() {
        let entries = this.plugin.externalLinkService.getAllExternalLinks();
        const searchQuery = this.searchInput.value.toLowerCase();
        const selectedCategory = this.categorySelect.value;
        const selectedTag = this.tagSelect.value;
        return entries.filter(entry => (searchQuery === '' ||
            entry.title.toLowerCase().includes(searchQuery) ||
            entry.summary.toLowerCase().includes(searchQuery)) &&
            (selectedCategory === '' || entry.categories.includes(selectedCategory)) &&
            (selectedTag === '' || entry.tags.includes(selectedTag)));
    }
    renderEntries(entries) {
        const tbody = this.tableElement.querySelector('tbody');
        if (!tbody)
            return;
        tbody.innerHTML = '';
        if (entries.length === 0) {
            const row = tbody.createEl('tr');
            row.createEl('td', { attr: { colspan: '9' }, text: 'No entries found.' });
            return;
        }
        entries.forEach(entry => {
            const row = tbody.createEl('tr');
            row.dataset.entryDate = entry.createdDate.toString();
            // Title with link
            const titleCell = row.createEl('td');
            const linkElement = titleCell.createEl('a', { text: entry.title, attr: { href: entry.path } });
            linkElement.addEventListener('click', (event) => {
                event.preventDefault();
                this.plugin.externalLinkService.openExternalFile(entry.path);
            });
            // Other columns
            row.createEl('td', { text: entry.summary });
            row.createEl('td', { text: entry.fileType });
            row.createEl('td', { text: entry.size ? `${entry.size} bytes` : '' });
            row.createEl('td', { text: new Date(entry.createdDate).toLocaleDateString() });
            // Categories, Tags, and Audience pills
            this.createPills(row.createEl('td'), entry.categories);
            this.createPills(row.createEl('td'), entry.tags);
            this.createPills(row.createEl('td'), entry.audience);
            // Actions
            const actionsCell = row.createEl('td');
            const editBtn = actionsCell.createEl('button', { text: 'Edit' });
            editBtn.addEventListener('click', () => this.plugin.addOrEditEntry(entry));
            const deleteBtn = actionsCell.createEl('button', { text: 'Delete' });
            deleteBtn.addEventListener('click', () => this.deleteEntry(entry));
            const copyPathBtn = actionsCell.createEl('button', { text: 'Copy Path' });
            copyPathBtn.addEventListener('click', () => this.copyPath(entry.path));
        });
    }
    createPills(container, items) {
        if (items && items.length > 0) {
            items.forEach(item => {
                container.createEl('span', { text: item, cls: 'pill' });
            });
        }
        else {
            container.setText('None');
        }
    }
    deleteEntry(entry) {
        this.plugin.externalLinkService.deleteExternalLink(entry);
        this.updateView();
        new obsidian.Notice(`Deleted entry: ${entry.title}`);
    }
    copyPath(path) {
        navigator.clipboard.writeText(path);
        new obsidian.Notice('File path copied to clipboard!');
    }
    updateCategorySelect() {
        this.categorySelect.innerHTML = '<option value="">All Categories</option>';
        const categories = this.plugin.externalLinkService.getCategories();
        categories.forEach(cat => {
            this.categorySelect.add(new Option(cat, cat));
        });
    }
    updateTagSelect() {
        this.tagSelect.innerHTML = '<option value="">All Tags</option>';
        const tags = this.plugin.externalLinkService.getTags();
        tags.forEach(tag => {
            this.tagSelect.add(new Option(tag, tag));
        });
    }
    clearAllFilters() {
        this.searchInput.value = '';
        this.categorySelect.value = '';
        this.tagSelect.value = '';
        this.updateView();
    }
    updateActiveFilters() {
        const activeFiltersDiv = this.containerEl.querySelector('.active-filters-container') || this.containerEl.createDiv({ cls: 'active-filters-container' });
        activeFiltersDiv.innerHTML = '';
        const addActiveFilter = (type, value, removeCallback) => {
            const filterEl = activeFiltersDiv.createEl('div', { cls: 'active-filter', text: `${type}: ${value}` });
            const removeBtn = filterEl.createEl('span', { cls: 'remove', text: 'Ã—' });
            removeBtn.addEventListener('click', removeCallback);
        };
        if (this.searchInput.value) {
            addActiveFilter('Search', this.searchInput.value, () => {
                this.searchInput.value = '';
                this.updateView();
            });
        }
        if (this.categorySelect.value) {
            addActiveFilter('Category', this.categorySelect.value, () => {
                this.categorySelect.value = '';
                this.updateView();
            });
        }
        if (this.tagSelect.value) {
            addActiveFilter('Tag', this.tagSelect.value, () => {
                this.tagSelect.value = '';
                this.updateView();
            });
        }
    }
    updateTable() {
        // Clear any existing filters
        this.clearFilters();
        const links = this.plugin.externalLinkService.getAllExternalLinks();
        // Sort links by most recently added/modified
        links.sort((a, b) => b.createdDate - a.createdDate);
        // Rebuild the table with the updated links
        this.buildTable(links);
    }
    clearFilters() {
        // Clear any filter inputs or reset filter state
        // This will depend on how you've implemented filtering
    }
    buildTable(links) {
        const tableBody = this.tableElement.querySelector('tbody');
        if (!tableBody)
            return;
        tableBody.empty();
        links.forEach(link => {
            const row = tableBody.createEl('tr');
            row.createEl('td').createEl('a', {
                text: link.title,
                href: link.path,
                cls: 'dms-external-link',
                attr: {
                    'data-path': link.path
                }
            }).addEventListener('click', (e) => {
                e.preventDefault();
                this.plugin.externalLinkService.openExternalFile(link.path);
            });
            // ... other columns ...
        });
    }
}

class ProxyNoteManager {
    constructor(app, proxyNotesPath) {
        this.app = app;
        this.proxyNotesPath = proxyNotesPath;
    }
    updateProxyNotesPath(newPath) {
        this.proxyNotesPath = newPath;
    }
    isProxyNote(file) {
        return file.path.startsWith(this.proxyNotesPath);
    }
    createProxyNote(externalLink, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = this.generateFileName(metadata.title);
            const filePath = this.proxyNotesPath ? `${this.proxyNotesPath}/${fileName}` : fileName;
            const content = this.generateProxyNoteContent(externalLink, metadata);
            try {
                const file = yield this.app.vault.create(filePath, content);
                return file;
            }
            catch (error) {
                new obsidian.Notice(`Failed to create proxy note: ${error}`);
                throw error;
            }
        });
    }
    updateProxyNote(file, externalLink, metadata) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = this.generateProxyNoteContent(externalLink, metadata);
            try {
                yield this.app.vault.modify(file, content);
            }
            catch (error) {
                new obsidian.Notice(`Failed to update proxy note: ${error}`);
                throw error;
            }
        });
    }
    handleDeletedProxyNote(file) {
        // Implement logic to handle when a proxy note is deleted
        // For example, you might want to remove it from an index or notify the user
        new obsidian.Notice(`Proxy note deleted: ${file.path}`);
    }
    handleRenamedProxyNote(file, oldPath) {
        // Implement logic to handle when a proxy note is renamed
        // For example, you might want to update an index or check if the new name is valid
        new obsidian.Notice(`Proxy note renamed from ${oldPath} to ${file.path}`);
    }
    handleChangedProxyNote(file) {
        // Implement logic to handle when a proxy note's content changes
        // For example, you might want to update metadata or check for consistency
        new obsidian.Notice(`Proxy note changed: ${file.path}`);
    }
    generateFileName(title) {
        // Implement logic to generate a valid file name from the title
        return `${title.replace(/[^a-zA-Z0-9]/g, '_')}.md`;
    }
    generateProxyNoteContent(externalLink, metadata) {
        // Implement logic to generate the content of the proxy note
        return `---
title: ${metadata.title}
external-link: ${externalLink}
tags: ${metadata.tags ? metadata.tags.join(', ') : ''}
---

# ${metadata.title}

[Open External Link](${externalLink})

## Metadata
- **Type**: ${metadata.type || 'Unknown'}
- **Created**: ${metadata.created || 'Unknown'}
- **Last Modified**: ${metadata.modified || 'Unknown'}
- **Size**: ${metadata.size || 'Unknown'}

## Summary
${metadata.summary || 'No summary available.'}

## Notes
${metadata.notes || 'No notes available.'}
`;
    }
}

const sanitizeFilePath = (path) => {
    // Replace backslashes with forward slashes
    path = path.replace(/\\/g, '/');
    // Remove any duplicated slashes (except for the double slash after the colon)
    path = path.replace(/([^:])\/+/g, '$1/');
    // Encode only specific characters
    return path.replace(/%/g, '%25')
        .replace(/\s/g, '%20')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29');
};
function isErrorWithMessage(error) {
    return (typeof error === 'object' &&
        error !== null &&
        'message' in error &&
        typeof error.message === 'string');
}
function toErrorWithMessage(maybeError) {
    if (isErrorWithMessage(maybeError))
        return maybeError;
    try {
        return new Error(JSON.stringify(maybeError));
    }
    catch (_a) {
        // fallback in case there's an error stringifying the maybeError
        // like with circular references for example.
        return new Error(String(maybeError));
    }
}
function getErrorMessage(error) {
    return toErrorWithMessage(error).message;
}

class ExternalLinkService {
    constructor(plugin, settings) {
        this.externalLinks = [];
        this.plugin = plugin;
        this.app = plugin.app;
        this.settings = settings;
    }
    loadExternalLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.plugin.loadData();
                this.externalLinks = (data === null || data === void 0 ? void 0 : data.externalLinks) || [];
            }
            catch (error) {
                console.error('Failed to load external links:', getErrorMessage(error));
                new obsidian.Notice('Failed to load external links. Check the console for details.');
            }
        });
    }
    saveExternalLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.plugin.saveData({ externalLinks: this.externalLinks });
            }
            catch (error) {
                console.error('Failed to save external links:', getErrorMessage(error));
                new obsidian.Notice('Failed to save external links. Check the console for details.');
            }
        });
    }
    getAllExternalLinks() {
        return this.externalLinks;
    }
    getExternalLink(index) {
        return this.externalLinks[index];
    }
    addExternalLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!link.path || !link.title) {
                throw new Error('External link must have a path and title');
            }
            this.externalLinks.push(link);
            yield this.saveExternalLinks();
            yield this.createProxyNote(link);
        });
    }
    editExternalLink(updatedLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this.externalLinks.findIndex((link) => link.path === updatedLink.path);
            if (index !== -1) {
                this.externalLinks[index] = updatedLink;
                yield this.saveExternalLinks();
                yield this.updateProxyNote(updatedLink);
            }
        });
    }
    deleteExternalLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            this.externalLinks = this.externalLinks.filter((l) => l.path !== link.path);
            yield this.saveExternalLinks();
            yield this.deleteProxyNote(link);
        });
    }
    createProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesPath}/${fileName}`;
            const content = `---
title: ${link.title}
external_path: ${link.path}
fileType: ${link.fileType}
audience: ${link.audience.join(', ')}
categories: ${link.categories.join(', ')}
tags: ${link.tags.join(', ')}
createdDate: ${new Date(link.createdDate).toISOString()}
size: ${link.size}
---

${link.summary}

${link.notes}

[Open External File](file://${encodeURI(link.path)})`;
            try {
                yield this.app.vault.create(filePath, content);
            }
            catch (error) {
                console.error('Failed to create proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to create proxy note. Check the console for details.');
            }
        });
    }
    updateProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesPath}/${fileName}`;
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (file instanceof obsidian.TFile) {
                    yield this.createProxyNote(link); // This will overwrite the existing file
                }
                else {
                    throw new Error('Proxy note not found');
                }
            }
            catch (error) {
                console.error('Failed to update proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to update proxy note. Check the console for details.');
            }
        });
    }
    deleteProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesPath}/${fileName}`;
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (file instanceof obsidian.TFile) {
                    yield this.app.vault.delete(file);
                }
            }
            catch (error) {
                console.error('Failed to delete proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to delete proxy note. Check the console for details.');
            }
        });
    }
    getCategories() {
        return Array.from(new Set(this.externalLinks.flatMap((link) => link.categories)));
    }
    getTags() {
        return Array.from(new Set(this.externalLinks.flatMap((link) => link.tags)));
    }
    addNewTag(tag) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const link of this.externalLinks) {
                if (!link.tags.includes(tag)) {
                    link.tags.push(tag);
                    yield this.updateProxyNote(link);
                }
            }
            yield this.saveExternalLinks();
        });
    }
    addNewCategory(category) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const link of this.externalLinks) {
                if (!link.categories.includes(category)) {
                    link.categories.push(category);
                    yield this.updateProxyNote(link);
                }
            }
            yield this.saveExternalLinks();
        });
    }
    openExternalFile(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = this.externalLinks.find((l) => l.path === path);
            if (link) {
                if (link.path.startsWith('http://') || link.path.startsWith('https://')) {
                    // For web URLs
                    window.open(link.path, '_blank');
                }
                else {
                    // For local file paths
                    const sanitizedPath = this.sanitizeFilePath(link.path);
                    const encodedPath = encodeURI(`file://${sanitizedPath}`);
                    window.open(encodedPath, '_blank');
                }
            }
            else {
                new obsidian.Notice('External link not found');
            }
        });
    }
    sanitizeFilePath(path) {
        // Replace backslashes with forward slashes
        path = path.replace(/\\/g, '/');
        // Remove any duplicated slashes (except for the double slash after the colon)
        path = path.replace(/([^:])\/+/g, '$1/');
        // Ensure the path starts with a drive letter for Windows paths
        if (!path.match(/^[a-zA-Z]:/)) {
            path = `C:${path}`; // Assuming C: drive, adjust if necessary
        }
        // Encode only specific characters
        return path.replace(/%/g, '%25')
            .replace(/\s/g, '%20')
            .replace(/\(/g, '%28')
            .replace(/\)/g, '%29');
    }
}

class AddExternalLinkModal extends obsidian.Modal {
    constructor(plugin, existingLink) {
        super(plugin.app);
        this.plugin = plugin;
        this.isEditing = !!existingLink;
        this.link = existingLink || {
            title: '',
            path: '',
            categories: [],
            audience: [],
            tags: [],
            notes: '',
            summary: '',
            fileType: '',
            size: 0,
            createdDate: Date.now()
        };
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass('dms-modal');
        contentEl.createEl('h2', { text: this.isEditing ? 'Edit Entry' : 'Add New Entry' });
        this.createDropZone(contentEl);
        this.createPathSetting(contentEl);
        this.createTitleSetting(contentEl);
        this.createFileTypeSetting(contentEl);
        this.createAudienceSetting(contentEl);
        this.createSummarySetting(contentEl);
        this.createCategoriesSetting(contentEl);
        this.createTagsSetting(contentEl);
        this.createDateSetting(contentEl);
        this.createSizeSetting(contentEl);
        this.createNotesSetting(contentEl);
        new obsidian.Setting(contentEl)
            .addButton(btn => btn
            .setButtonText(this.isEditing ? 'Save' : 'Add')
            .setCta()
            .onClick(() => this.saveEntry()));
    }
    createDropZone(contentEl) {
        this.dropZone = contentEl.createEl('div', { cls: 'dms-dropzone', text: 'Drop files here or click to select' });
        this.dropZone.addEventListener('click', () => this.browseFile());
        this.dropZone.addEventListener('dragover', (e) => {
            e.preventDefault();
            this.dropZone.addClass('dms-dropzone-active');
        });
        this.dropZone.addEventListener('dragleave', () => {
            this.dropZone.removeClass('dms-dropzone-active');
        });
        this.dropZone.addEventListener('drop', (e) => {
            e.preventDefault();
            this.dropZone.removeClass('dms-dropzone-active');
            if (e.dataTransfer && e.dataTransfer.files.length > 0) {
                this.handleDroppedFile(e.dataTransfer.files[0]);
            }
        });
    }
    handleDroppedFile(file) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.populateFileData(file);
        });
    }
    browseFile() {
        return __awaiter(this, void 0, void 0, function* () {
            const input = document.createElement('input');
            input.type = 'file';
            input.onchange = () => __awaiter(this, void 0, void 0, function* () {
                if (input.files && input.files.length > 0) {
                    yield this.populateFileData(input.files[0]);
                }
            });
            input.click();
        });
    }
    populateFileData(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const tempLink = {
                path: file.name,
                title: file.name.split('.').slice(0, -1).join('.'),
                fileType: file.name.split('.').pop() || '',
                size: file.size,
                createdDate: file.lastModified,
                categories: [],
                audience: [],
                tags: [],
                notes: '',
                summary: ''
            };
            // Show prefilled data and ask for confirmation
            new ConfirmationModal(this.app, "Confirm File Details", this.generateConfirmationContent(tempLink), (confirmed) => {
                if (confirmed) {
                    Object.assign(this.link, tempLink);
                    this.updateModalContent();
                }
            }).open();
        });
    }
    generateConfirmationContent(link) {
        const content = document.createDocumentFragment();
        content.createEl('p', { text: 'Please confirm the details of the file:' });
        content.createEl('p', { text: `Title: ${link.title}` });
        content.createEl('p', { text: `Path: ${link.path}` });
        content.createEl('p', { text: `File Type: ${link.fileType}` });
        content.createEl('p', { text: `Size: ${link.size} bytes` });
        content.createEl('p', { text: `Created Date: ${new Date(link.createdDate).toLocaleString()}` });
        return content;
    }
    createPathSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Path')
            .setDesc('URL or file path')
            .addText(text => text
            .setPlaceholder('Enter path or URL')
            .setValue(this.link.path)
            .onChange(value => this.link.path = value))
            .addButton(btn => btn
            .setButtonText('Browse')
            .onClick(() => this.browseFile()));
    }
    createTitleSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Title')
            .addText(text => text
            .setPlaceholder('Enter title')
            .setValue(this.link.title)
            .onChange(value => this.link.title = value));
    }
    createFileTypeSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('File Type')
            .addText(text => text
            .setValue(this.link.fileType)
            .onChange(value => this.link.fileType = value));
    }
    createAudienceSetting(contentEl) {
        this.createMultiSelectSetting(contentEl, 'Audience', this.link.audience, ['Internal', 'External', 'Confidential', 'Public']);
    }
    createSummarySetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Summary')
            .addTextArea(text => text
            .setValue(this.link.summary)
            .onChange(value => this.link.summary = value));
    }
    createCategoriesSetting(contentEl) {
        this.createMultiSelectSetting(contentEl, 'Categories', this.link.categories, this.plugin.externalLinkService.getCategories());
    }
    createTagsSetting(contentEl) {
        this.createMultiSelectSetting(contentEl, 'Tags', this.link.tags, this.plugin.externalLinkService.getTags());
    }
    createDateSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Created Date')
            .addMomentFormat(component => component
            .setDefaultFormat('YYYY-MM-DD')
            .setValue(this.link.createdDate ? obsidian.moment(this.link.createdDate).format('YYYY-MM-DD') : '')
            .onChange(value => {
            const momentDate = obsidian.moment(value, 'YYYY-MM-DD', true);
            this.link.createdDate = momentDate.isValid() ? momentDate.valueOf() : Date.now();
        }));
    }
    createSizeSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Size (bytes)')
            .addText(text => text
            .setValue(this.link.size.toString())
            .onChange(value => this.link.size = parseInt(value) || 0));
    }
    createNotesSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Notes')
            .addTextArea(text => text
            .setValue(this.link.notes)
            .onChange(value => this.link.notes = value));
    }
    createMultiSelectSetting(contentEl, name, selectedItems, allItems) {
        const setting = new obsidian.Setting(contentEl).setName(name);
        const input = new obsidian.TextComponent(setting.controlEl);
        const suggestions = setting.controlEl.createDiv('suggestions');
        const selected = setting.controlEl.createDiv('selected-items');
        input.onChange(value => {
            suggestions.empty();
            const matchingItems = allItems.filter(item => item.toLowerCase().includes(value.toLowerCase()));
            matchingItems.forEach(item => {
                const suggestionEl = suggestions.createDiv('suggestion-item');
                suggestionEl.setText(item);
                suggestionEl.onClickEvent(() => {
                    if (!selectedItems.includes(item)) {
                        selectedItems.push(item);
                        updateSelectedItems();
                    }
                    input.setValue('');
                    suggestions.empty();
                });
            });
        });
        const updateSelectedItems = () => {
            selected.empty();
            selectedItems.forEach(item => {
                const itemEl = selected.createEl('span', { cls: 'selected-item', text: item });
                const removeBtn = itemEl.createEl('span', { cls: 'remove', text: 'Ã—' });
                removeBtn.onClickEvent(() => {
                    selectedItems.remove(item);
                    updateSelectedItems();
                });
            });
        };
        updateSelectedItems();
    }
    saveEntry() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isEditing) {
                yield this.plugin.externalLinkService.editExternalLink(this.link);
            }
            else {
                yield this.plugin.externalLinkService.addExternalLink(this.link);
            }
            this.close();
            this.plugin.updateDMSView();
        });
    }
    updateModalContent() {
        const titleInput = this.contentEl.querySelector('#title');
        const fileTypeInput = this.contentEl.querySelector('#fileType');
        const sizeInput = this.contentEl.querySelector('#size');
        const createdDateInput = this.contentEl.querySelector('#createdDate');
        if (titleInput)
            titleInput.value = this.link.title;
        if (fileTypeInput)
            fileTypeInput.value = this.link.fileType;
        if (sizeInput)
            sizeInput.value = this.link.size.toString();
        if (createdDateInput)
            createdDateInput.value = obsidian.moment(this.link.createdDate).format('YYYY-MM-DD');
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}
class ConfirmationModal extends obsidian.Modal {
    constructor(app, title, content, onConfirm) {
        super(app);
        this.title = title;
        this.content = content;
        this.onConfirm = onConfirm;
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.createEl('h2', { text: this.title });
        contentEl.appendChild(this.content);
        new obsidian.Setting(contentEl)
            .addButton(btn => btn
            .setButtonText('Confirm')
            .setCta()
            .onClick(() => {
            this.close();
            this.onConfirm(true);
        }))
            .addButton(btn => btn
            .setButtonText('Cancel')
            .onClick(() => {
            this.close();
            this.onConfirm(false);
        }));
    }
}

const DEFAULT_SETTINGS = {
    proxyNotesPath: ''
};
class DMSPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            // Ensure the proxy notes folder exists
            yield this.ensureProxyNotesFolder();
            this.proxyNoteManager = new ProxyNoteManager(this.app, this.settings.proxyNotesPath);
            this.externalLinkService = new ExternalLinkService(this, this.settings);
            this.addSettingTab(new DMSSettingTab(this.app, this));
            this.registerView('dms-view', (leaf) => {
                this.dmsView = new DMSView(leaf, this);
                return this.dmsView;
            });
            this.addRibbonIcon('folder', 'Open DMS View', () => {
                this.activateView();
            });
            this.addCommand({
                id: 'open-dms-view',
                name: 'Open DMS View',
                callback: () => {
                    this.activateView();
                }
            });
            this.registerEvent(this.app.vault.on('delete', (file) => {
                if (file instanceof obsidian.TFile && this.proxyNoteManager.isProxyNote(file)) {
                    this.proxyNoteManager.handleDeletedProxyNote(file);
                }
            }));
            this.registerEvent(this.app.vault.on('rename', (file, oldPath) => {
                if (file instanceof obsidian.TFile && this.proxyNoteManager.isProxyNote(file)) {
                    this.proxyNoteManager.handleRenamedProxyNote(file, oldPath);
                }
            }));
            this.registerEvent(this.app.metadataCache.on('changed', (file) => {
                if (file instanceof obsidian.TFile && this.proxyNoteManager.isProxyNote(file)) {
                    this.proxyNoteManager.handleChangedProxyNote(file);
                }
            }));
            this.registerEvent(this.app.workspace.on('file-open', (file) => {
                if (file && this.isProxyNote(file)) {
                    this.openExternalLinkFromProxyNote(file);
                }
            }));
            this.registerDomEvent(document, 'click', (evt) => {
                const target = evt.target;
                if (target.tagName === 'A' && target.hasClass('internal-link')) {
                    const href = target.getAttribute('href');
                    if (href) {
                        const file = this.app.metadataCache.getFirstLinkpathDest(href, '');
                        if (file && this.isProxyNote(file)) {
                            evt.preventDefault();
                            this.openExternalLinkFromProxyNote(file);
                        }
                    }
                }
            });
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    activateView() {
        return __awaiter(this, void 0, void 0, function* () {
            this.app.workspace.detachLeavesOfType('dms-view');
            yield this.app.workspace.getRightLeaf(false).setViewState({
                type: 'dms-view',
                active: true,
            });
            this.app.workspace.revealLeaf(this.app.workspace.getLeavesOfType('dms-view')[0]);
        });
    }
    ensureProxyNotesFolder() {
        return __awaiter(this, void 0, void 0, function* () {
            const folderPath = this.settings.proxyNotesPath || '/';
            if (folderPath === '/') {
                // If the path is root, we don't need to create anything
                return;
            }
            try {
                const folderExists = yield this.app.vault.adapter.exists(folderPath);
                if (!folderExists) {
                    yield this.app.vault.createFolder(folderPath);
                    new obsidian.Notice(`Created proxy notes folder: ${folderPath}`);
                }
            }
            catch (error) {
                console.error('Failed to create proxy notes folder:', error);
                new obsidian.Notice('Failed to create proxy notes folder. Check the console for details.');
            }
        });
    }
    addOrEditEntry(existingLink) {
        new AddExternalLinkModal(this, existingLink).open();
    }
    updateDMSView() {
        if (this.dmsView) {
            this.dmsView.updateTable();
        }
    }
    isProxyNote(file) {
        return file.path.startsWith(this.settings.proxyNotesPath);
    }
    openExternalLinkFromProxyNote(file) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.app.vault.read(file);
            const frontmatter = (_a = this.app.metadataCache.getFileCache(file)) === null || _a === void 0 ? void 0 : _a.frontmatter;
            if (frontmatter && frontmatter.external_path) {
                this.externalLinkService.openExternalFile(frontmatter.external_path);
            }
        });
    }
}

module.exports = DMSPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
