/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class AddExternalLinkModal extends obsidian.Modal {
    constructor(plugin, existingLink) {
        super(plugin.app);
        this.plugin = plugin;
        this.isEditing = !!existingLink;
        this.link = existingLink || {
            title: '',
            path: '',
            categories: [],
            audience: [],
            tags: [],
            notes: '',
            summary: '',
            fileType: '',
            size: 0,
            createdDate: Date.now()
        };
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.empty();
        contentEl.addClass('dms-modal');
        contentEl.createEl('h2', { text: this.isEditing ? 'Edit Entry' : 'Add New Entry' });
        this.createPathSetting(contentEl);
        this.createTitleSetting(contentEl);
        this.createFileTypeSetting(contentEl);
        this.createAudienceSetting(contentEl);
        this.createSummarySetting(contentEl);
        this.createCategoriesSetting(contentEl);
        this.createTagsSetting(contentEl);
        this.createDateSetting(contentEl);
        this.createSizeSetting(contentEl);
        this.createNotesSetting(contentEl);
        new obsidian.Setting(contentEl)
            .addButton(btn => btn
            .setButtonText(this.isEditing ? 'Save' : 'Add')
            .setCta()
            .onClick(() => this.saveEntry()));
    }
    createPathSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Path')
            .setDesc('URL or file path')
            .addText(text => text
            .setPlaceholder('Enter path or URL')
            .setValue(this.link.path)
            .onChange(value => this.link.path = value))
            .addButton(btn => btn
            .setButtonText('Browse')
            .onClick(() => this.browseFile()));
    }
    createTitleSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Title')
            .addText(text => text
            .setPlaceholder('Enter title')
            .setValue(this.link.title)
            .onChange(value => this.link.title = value));
    }
    createFileTypeSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('File Type')
            .addText(text => text
            .setValue(this.link.fileType)
            .onChange(value => this.link.fileType = value));
    }
    createAudienceSetting(contentEl) {
        this.createMultiSelectSetting(contentEl, 'Audience', this.link.audience, ['Internal', 'External', 'Confidential', 'Public']);
    }
    createSummarySetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Summary')
            .addTextArea(text => text
            .setValue(this.link.summary)
            .onChange(value => this.link.summary = value));
    }
    createCategoriesSetting(contentEl) {
        this.createMultiSelectSetting(contentEl, 'Categories', this.link.categories, this.plugin.externalLinkService.getCategories());
    }
    createTagsSetting(contentEl) {
        this.createMultiSelectSetting(contentEl, 'Tags', this.link.tags, this.plugin.externalLinkService.getTags());
    }
    createDateSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Created Date')
            .addMomentFormat(component => component
            .setDefaultFormat('YYYY-MM-DD')
            .setValue(this.link.createdDate ? window.moment(this.link.createdDate).format('YYYY-MM-DD') : '')
            .onChange(value => {
            const momentDate = window.moment(value, 'YYYY-MM-DD', true);
            this.link.createdDate = momentDate.isValid() ? momentDate.valueOf() : Date.now();
        }));
    }
    createSizeSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Size (bytes)')
            .addText(text => text
            .setValue(this.link.size.toString())
            .onChange(value => this.link.size = parseInt(value) || 0));
    }
    createNotesSetting(contentEl) {
        new obsidian.Setting(contentEl)
            .setName('Notes')
            .addTextArea(text => text
            .setValue(this.link.notes)
            .onChange(value => this.link.notes = value));
    }
    createMultiSelectSetting(contentEl, name, selectedItems, allItems) {
        const setting = new obsidian.Setting(contentEl).setName(name);
        const input = new obsidian.TextComponent(setting.controlEl);
        const suggestions = setting.controlEl.createDiv('suggestions');
        const selected = setting.controlEl.createDiv('selected-items');
        input.onChange(value => {
            suggestions.empty();
            const matchingItems = allItems.filter(item => item.toLowerCase().includes(value.toLowerCase()));
            matchingItems.forEach(item => {
                const suggestionEl = suggestions.createDiv('suggestion-item');
                suggestionEl.setText(item);
                suggestionEl.onClickEvent(() => {
                    if (!selectedItems.includes(item)) {
                        selectedItems.push(item);
                        updateSelectedItems();
                    }
                    input.setValue('');
                    suggestions.empty();
                });
            });
        });
        const updateSelectedItems = () => {
            selected.empty();
            selectedItems.forEach(item => {
                const itemEl = selected.createEl('span', { cls: 'selected-item', text: item });
                const removeBtn = itemEl.createEl('span', { cls: 'remove', text: 'Ã—' });
                removeBtn.onClickEvent(() => {
                    selectedItems.remove(item);
                    updateSelectedItems();
                });
            });
        };
        updateSelectedItems();
    }
    browseFile() {
        return __awaiter(this, void 0, void 0, function* () {
            // Use the showOpenDialog method from Electron's remote module
            const { remote } = require('electron');
            const result = yield remote.dialog.showOpenDialog({
                properties: ['openFile']
            });
            if (!result.canceled && result.filePaths.length > 0) {
                const filePath = result.filePaths[0];
                const file = yield this.plugin.app.vault.adapter.stat(filePath);
                if (file) {
                    const fileName = filePath.split('/').pop() || filePath.split('\\').pop() || '';
                    const fileNameWithoutExtension = fileName.split('.').slice(0, -1).join('.') || fileName;
                    const fileExtension = fileName.split('.').pop() || '';
                    this.link.path = filePath;
                    this.link.title = fileNameWithoutExtension;
                    this.link.fileType = fileExtension || 'unknown';
                    this.link.size = file.size;
                    this.link.createdDate = file.ctime;
                    this.updateModalContent();
                }
            }
        });
    }
    saveEntry() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isEditing) {
                yield this.plugin.externalLinkService.editExternalLink(this.link, this.link);
            }
            else {
                yield this.plugin.externalLinkService.addExternalLink(this.link);
            }
            this.close();
        });
    }
    updateModalContent() {
        this.onOpen();
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

class DMSView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
    }
    getViewType() {
        return 'dms-view';
    }
    getDisplayText() {
        return 'DMS View';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            const { containerEl } = this;
            containerEl.empty();
            containerEl.createEl('style', {
                text: `
                .dms-view-container { padding: 20px; }
                .dms-top-bar { display: flex; gap: 10px; margin-bottom: 20px; }
                .dms-table { width: 100%; border-collapse: collapse; }
                .dms-table th, .dms-table td { padding: 10px; border: 1px solid var(--background-modifier-border); }
                .dms-table th { background-color: var(--background-secondary); }
                .dms-drop-zone { border: 2px dashed var(--background-modifier-border); padding: 20px; text-align: center; margin-bottom: 20px; }
                .dms-pill { background-color: var(--interactive-accent); color: var(--text-on-accent); padding: 2px 8px; border-radius: 12px; font-size: 12px; margin: 2px; display: inline-block; }
            `
            });
            const container = containerEl.createDiv('dms-view-container');
            this.createTopBar(container);
            this.createDropZone(container);
            this.createTable(container);
        });
    }
    createTopBar(containerEl) {
        const topBar = containerEl.createEl('div', { cls: 'dms-top-bar' });
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Add Entry')
            .onClick(() => new AddExternalLinkModal(this.plugin).open());
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Edit Categories')
            .onClick(() => this.editCategories());
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Edit Tags')
            .onClick(() => this.editTags());
        this.searchInput = new obsidian.TextComponent(topBar)
            .setPlaceholder('Search entries...')
            .onChange(() => this.updateTable());
        this.categorySelect = new obsidian.DropdownComponent(topBar)
            .addOption('all', 'All Categories')
            .onChange(() => this.updateTable());
        this.tagSelect = new obsidian.DropdownComponent(topBar)
            .addOption('all', 'All Tags')
            .onChange(() => this.updateTable());
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Clear Filters')
            .onClick(() => this.clearFilters());
    }
    createDropZone(containerEl) {
        this.dropZone = containerEl.createEl('div', { text: 'Drop files or URLs here', cls: 'dms-drop-zone' });
        this.dropZone.addEventListener('dragover', this.handleDragOver.bind(this));
        this.dropZone.addEventListener('dragleave', this.handleDragLeave.bind(this));
        this.dropZone.addEventListener('drop', this.handleDrop.bind(this));
    }
    createTable(containerEl) {
        this.tableView = containerEl.createEl('table', { cls: 'dms-table' });
        this.updateTable();
    }
    updateTable() {
        const searchTerm = this.searchInput.getValue().toLowerCase();
        const selectedCategory = this.categorySelect.getValue();
        const selectedTag = this.tagSelect.getValue();
        const filteredEntries = this.plugin.externalLinkService.getAllExternalLinks().filter(entry => (searchTerm === '' || this.entryMatchesSearch(entry, searchTerm)) &&
            (selectedCategory === 'all' || entry.categories.includes(selectedCategory)) &&
            (selectedTag === 'all' || entry.tags.includes(selectedTag)));
        this.renderEntries(filteredEntries);
    }
    entryMatchesSearch(entry, searchTerm) {
        return entry.title.toLowerCase().includes(searchTerm) ||
            entry.path.toLowerCase().includes(searchTerm) ||
            entry.summary.toLowerCase().includes(searchTerm) ||
            entry.categories.some(cat => cat.toLowerCase().includes(searchTerm)) ||
            entry.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||
            entry.audience.some(aud => aud.toLowerCase().includes(searchTerm));
    }
    renderEntries(entries) {
        this.tableView.empty();
        const header = this.tableView.createEl('thead').createEl('tr');
        ['Title', 'Summary', 'File Type', 'Size', 'Created Date', 'Categories', 'Tags', 'Audience', 'Actions'].forEach(text => {
            header.createEl('th', { text });
        });
        const tbody = this.tableView.createEl('tbody');
        entries.forEach(entry => this.renderEntry(tbody, entry));
    }
    renderEntry(tbody, entry) {
        const row = tbody.createEl('tr');
        const titleCell = row.createEl('td');
        const titleLink = titleCell.createEl('a', { text: entry.title, href: entry.path });
        titleLink.addEventListener('click', (e) => {
            e.preventDefault();
            this.plugin.externalLinkService.openExternalFile(entry.path);
        });
        row.createEl('td', { text: entry.summary });
        row.createEl('td', { text: entry.fileType });
        row.createEl('td', { text: `${entry.size} bytes` });
        row.createEl('td', { text: obsidian.moment(entry.createdDate).format('YYYY-MM-DD') });
        const categoriesCell = row.createEl('td');
        entry.categories.forEach(cat => categoriesCell.createEl('span', { text: cat, cls: 'dms-pill' }));
        const tagsCell = row.createEl('td');
        entry.tags.forEach(tag => tagsCell.createEl('span', { text: tag, cls: 'dms-pill' }));
        const audienceCell = row.createEl('td');
        entry.audience.forEach(aud => audienceCell.createEl('span', { text: aud, cls: 'dms-pill' }));
        const actionsCell = row.createEl('td');
        new obsidian.ButtonComponent(actionsCell)
            .setButtonText('Edit')
            .onClick(() => new AddExternalLinkModal(this.plugin, entry).open());
        new obsidian.ButtonComponent(actionsCell)
            .setButtonText('Delete')
            .onClick(() => this.deleteEntry(entry));
        new obsidian.ButtonComponent(actionsCell)
            .setButtonText('Copy Path')
            .onClick(() => this.copyPath(entry.path));
    }
    deleteEntry(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.externalLinkService.deleteExternalLink(entry);
            this.updateTable();
        });
    }
    copyPath(path) {
        navigator.clipboard.writeText(path);
        new obsidian.Notice('File path copied to clipboard!');
    }
    clearFilters() {
        this.searchInput.setValue('');
        this.categorySelect.setValue('all');
        this.tagSelect.setValue('all');
        this.updateTable();
    }
    editCategories() {
        // Implement category editing logic
    }
    editTags() {
        // Implement tag editing logic
    }
    handleDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dropZone.addClass('drag-over');
    }
    handleDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dropZone.removeClass('drag-over');
    }
    handleDrop(event) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            event.preventDefault();
            event.stopPropagation();
            this.dropZone.removeClass('drag-over');
            const items = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.items;
            if (!items)
                return;
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                if (item.kind === 'file') {
                    const file = item.getAsFile();
                    if (file) {
                        yield this.addFileEntry(file);
                    }
                }
                else if (item.kind === 'string' && item.type === 'text/uri-list') {
                    item.getAsString((url) => __awaiter(this, void 0, void 0, function* () {
                        yield this.addUrlEntry(url);
                    }));
                }
            }
        });
    }
    addFileEntry(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const entry = {
                title: file.name,
                path: file.webkitRelativePath || file.name,
                fileType: file.type || 'unknown',
                audience: [],
                summary: `File: ${file.name}`,
                categories: [],
                tags: [],
                createdDate: file.lastModified,
                size: file.size,
                notes: ''
            };
            yield this.plugin.externalLinkService.addExternalLink(entry);
            this.updateTable();
        });
    }
    addUrlEntry(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const entry = {
                title: new URL(url).hostname,
                path: url,
                fileType: 'text/uri-list',
                audience: [],
                summary: 'Dropped URL',
                categories: ['URL'],
                tags: ['web'],
                createdDate: Date.now(),
                size: 0,
                notes: ''
            };
            yield this.plugin.externalLinkService.addExternalLink(entry);
            this.updateTable();
        });
    }
}

const sanitizeFilePath = (path) => {
    // Replace backslashes with forward slashes
    path = path.replace(/\\/g, '/');
    // Remove any duplicated slashes (except for the double slash after the colon)
    path = path.replace(/([^:])\/+/g, '$1/');
    // Encode only specific characters
    return path.replace(/%/g, '%25')
        .replace(/\s/g, '%20')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29');
};
function isErrorWithMessage(error) {
    return (typeof error === 'object' &&
        error !== null &&
        'message' in error &&
        typeof error.message === 'string');
}
function toErrorWithMessage(maybeError) {
    if (isErrorWithMessage(maybeError))
        return maybeError;
    try {
        return new Error(JSON.stringify(maybeError));
    }
    catch (_a) {
        // fallback in case there's an error stringifying the maybeError
        // like with circular references for example.
        return new Error(String(maybeError));
    }
}
function getErrorMessage(error) {
    return toErrorWithMessage(error).message;
}

class ExternalLinkService {
    constructor(plugin, settings) {
        this.externalLinks = [];
        this.plugin = plugin;
        this.app = plugin.app;
        this.settings = settings;
    }
    loadExternalLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.plugin.loadData();
                this.externalLinks = (data === null || data === void 0 ? void 0 : data.externalLinks) || [];
            }
            catch (error) {
                console.error('Failed to load external links:', getErrorMessage(error));
                new obsidian.Notice('Failed to load external links. Check the console for details.');
            }
        });
    }
    saveExternalLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.plugin.saveData({ externalLinks: this.externalLinks });
            }
            catch (error) {
                console.error('Failed to save external links:', getErrorMessage(error));
                new obsidian.Notice('Failed to save external links. Check the console for details.');
            }
        });
    }
    getAllExternalLinks() {
        return this.externalLinks;
    }
    getExternalLink(index) {
        return this.externalLinks[index];
    }
    addExternalLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            this.externalLinks.push(link);
            yield this.saveExternalLinks();
            yield this.createProxyNote(link);
        });
    }
    editExternalLink(oldLink, updatedLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this.externalLinks.findIndex(link => link.path === oldLink.path);
            if (index !== -1) {
                this.externalLinks[index] = updatedLink;
                yield this.saveExternalLinks();
                yield this.updateProxyNote(oldLink, updatedLink);
            }
        });
    }
    deleteExternalLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            this.externalLinks = this.externalLinks.filter(l => l.path !== link.path);
            yield this.saveExternalLinks();
            yield this.deleteProxyNote(link);
        });
    }
    createProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesFolder}/${fileName}`;
            const content = `---
title: ${link.title}
url: ${link.path}
fileType: ${link.fileType}
audience: ${link.audience.join(', ')}
categories: ${link.categories.join(', ')} // Changed from category to categories
tags: ${link.tags.join(', ')}
createdDate: ${new Date(link.createdDate).toISOString()}
size: ${link.size}
---

${link.summary}

${link.notes}`;
            try {
                yield this.app.vault.create(filePath, content);
            }
            catch (error) {
                if (error.message.includes('File already exists')) {
                    yield this.app.vault.modify(this.app.vault.getAbstractFileByPath(filePath), content);
                }
                else {
                    console.error('Failed to create proxy note:', getErrorMessage(error));
                    new obsidian.Notice('Failed to create proxy note. Check the console for details.');
                }
            }
        });
    }
    updateProxyNote(oldLink, updatedLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const oldFileName = sanitizeFilePath(`${oldLink.title}.md`);
            const newFileName = sanitizeFilePath(`${updatedLink.title}.md`);
            const oldFilePath = `${this.settings.proxyNotesFolder}/${oldFileName}`;
            const newFilePath = `${this.settings.proxyNotesFolder}/${newFileName}`;
            try {
                if (oldFileName !== newFileName) {
                    yield this.app.vault.rename(this.app.vault.getAbstractFileByPath(oldFilePath), newFilePath);
                }
                yield this.createProxyNote(updatedLink);
            }
            catch (error) {
                console.error('Failed to update proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to update proxy note. Check the console for details.');
            }
        });
    }
    deleteProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesFolder}/${fileName}`;
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (file instanceof obsidian.TFile) {
                    yield this.app.vault.delete(file);
                }
            }
            catch (error) {
                console.error('Failed to delete proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to delete proxy note. Check the console for details.');
            }
        });
    }
    getCategories() {
        return Array.from(new Set(this.externalLinks.flatMap(link => link.categories)));
    }
    getTags() {
        return Array.from(new Set(this.externalLinks.flatMap(link => link.tags)));
    }
    addNewTag(tag) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const link of this.externalLinks) {
                if (!link.tags.includes(tag)) {
                    link.tags.push(tag);
                    yield this.updateProxyNote(link, link);
                }
            }
            yield this.saveExternalLinks();
        });
    }
    addNewCategory(category) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const link of this.externalLinks) {
                if (!link.categories.includes(category)) {
                    link.categories.push(category);
                    yield this.updateProxyNote(link, link);
                }
            }
            yield this.saveExternalLinks();
        });
    }
    openExternalFile(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = this.externalLinks.find(l => l.path === path);
            if (link) {
                if (link.path.startsWith('http://') || link.path.startsWith('https://')) {
                    // For web URLs
                    window.open(link.path, '_blank');
                }
                else {
                    // For local file paths
                    const sanitizedPath = this.sanitizeFilePath(link.path);
                    const encodedPath = encodeURI(`file://${sanitizedPath}`);
                    window.open(encodedPath, '_blank');
                }
            }
            else {
                new obsidian.Notice('External link not found');
            }
        });
    }
    sanitizeFilePath(path) {
        // Replace backslashes with forward slashes
        path = path.replace(/\\/g, '/');
        // Remove any duplicated slashes (except for the double slash after the colon)
        path = path.replace(/([^:])\/+/g, '$1/');
        // Ensure the path starts with a drive letter for Windows paths
        if (!path.match(/^[a-zA-Z]:/)) {
            path = `C:${path}`; // Assuming C: drive, adjust if necessary
        }
        // Encode only specific characters
        return path.replace(/%/g, '%25')
            .replace(/\s/g, '%20')
            .replace(/\(/g, '%28')
            .replace(/\)/g, '%29');
    }
}

const DEFAULT_SETTINGS = {
    proxyNotesFolder: 'DMS Proxy Notes',
    defaultFolder: 'DMS',
    // Add any other default settings here
};

class DMSSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'DMS Settings' });
        new obsidian.Setting(containerEl)
            .setName('Proxy Notes Folder')
            .setDesc('Folder where proxy notes will be stored')
            .addText(text => text
            .setPlaceholder('Enter folder path')
            .setValue(this.plugin.settings.proxyNotesFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.proxyNotesFolder = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Default Folder')
            .setDesc('Default folder for new external links')
            .addText(text => text
            .setPlaceholder('Enter folder path')
            .setValue(this.plugin.settings.defaultFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.defaultFolder = value;
            yield this.plugin.saveSettings();
        })));
        // Add more settings as needed
    }
}

class DMSPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.dmsView = null;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.externalLinkService = new ExternalLinkService(this, this.settings);
            this.addCommand({
                id: 'open-dms-view',
                name: 'Open DMS View',
                callback: () => this.activateDMSView(),
            });
            this.addRibbonIcon('folder', 'Open DMS View', () => this.activateDMSView());
            this.addSettingTab(new DMSSettingTab(this.app, this));
            this.registerView('dms-view', (leaf) => new DMSView(leaf, this));
            if (this.app.workspace.layoutReady) {
                this.initializeDMSView();
            }
            else {
                this.app.workspace.onLayoutReady(() => this.initializeDMSView());
            }
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    initializeDMSView() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.ensureProxyNotesFolderExists();
            if (this.app.workspace.getLeavesOfType('dms-view').length === 0) {
                yield this.activateDMSView();
            }
        });
    }
    activateDMSView() {
        return __awaiter(this, void 0, void 0, function* () {
            const { workspace } = this.app;
            let leaf = workspace.getLeavesOfType('dms-view')[0];
            if (!leaf) {
                leaf = workspace.getRightLeaf(false);
                yield leaf.setViewState({ type: 'dms-view', active: true });
            }
            workspace.revealLeaf(leaf);
            if (leaf.view instanceof DMSView) {
                this.dmsView = leaf.view;
            }
        });
    }
    ensureProxyNotesFolderExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const folderPath = this.settings.proxyNotesFolder;
            if (!(yield this.app.vault.adapter.exists(folderPath))) {
                yield this.app.vault.createFolder(folderPath);
            }
        });
    }
    updateDMSView() {
        if (this.dmsView) {
            this.dmsView.updateTable();
        }
    }
    addNewTag(tag) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.externalLinkService.addNewTag(tag);
            this.updateDMSView();
        });
    }
    addNewCategory(category) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.externalLinkService.addNewCategory(category);
            this.updateDMSView();
        });
    }
}

module.exports = DMSPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
