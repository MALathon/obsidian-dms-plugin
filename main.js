/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class AddExternalLinkModal extends obsidian.Modal {
    constructor(plugin, existingLink) {
        super(plugin.app);
        this.plugin = plugin;
        this.isEditing = !!existingLink;
        this.link = existingLink || {
            title: '',
            path: '',
            category: '',
            audience: [],
            tags: [],
            notes: '',
            summary: '',
            fileType: '',
            size: 0,
            createdDate: Date.now()
        };
    }
    onOpen() {
        const { contentEl } = this;
        contentEl.createEl("h2", { text: this.isEditing ? "Edit External Link" : "Add External Link" });
        new obsidian.Setting(contentEl)
            .setName('Title')
            .addText(text => text
            .setValue(this.link.title)
            .onChange(value => this.link.title = value));
        new obsidian.Setting(contentEl)
            .setName('Path')
            .addText(text => text
            .setValue(this.link.path)
            .onChange(value => this.link.path = value));
        new obsidian.Setting(contentEl)
            .setName('Category')
            .addText(text => text
            .setValue(this.link.category)
            .onChange(value => this.link.category = value));
        new obsidian.Setting(contentEl)
            .setName('Audience')
            .addText(text => text
            .setValue(this.link.audience.join(', '))
            .onChange(value => this.link.audience = value.split(',').map(item => item.trim())));
        new obsidian.Setting(contentEl)
            .setName('Tags')
            .addText(text => text
            .setValue(this.link.tags.join(', '))
            .onChange(value => this.link.tags = value.split(',').map(item => item.trim())));
        new obsidian.Setting(contentEl)
            .setName('Summary')
            .addTextArea(textarea => textarea
            .setValue(this.link.summary)
            .onChange(value => this.link.summary = value));
        new obsidian.Setting(contentEl)
            .setName('Notes')
            .addTextArea(textarea => textarea
            .setValue(this.link.notes)
            .onChange(value => this.link.notes = value));
        new obsidian.Setting(contentEl)
            .addButton(btn => btn
            .setButtonText(this.isEditing ? 'Save Changes' : 'Add Link')
            .setCta()
            .onClick(() => {
            if (this.isEditing) {
                this.plugin.externalLinkService.editExternalLink(this.link, this.link);
            }
            else {
                this.plugin.externalLinkService.addExternalLink(this.link);
            }
            this.close();
            this.plugin.updateDMSView();
        }));
    }
    onClose() {
        const { contentEl } = this;
        contentEl.empty();
    }
}

class DMSView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
    }
    getViewType() {
        return 'dms-view';
    }
    getDisplayText() {
        return 'DMS View';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            const { containerEl } = this;
            containerEl.empty();
            this.createTopBar(containerEl);
            this.createDropZone(containerEl);
            this.createTable(containerEl);
        });
    }
    createTopBar(containerEl) {
        const topBar = containerEl.createEl('div', { cls: 'dms-top-bar' });
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Add Entry')
            .onClick(() => new AddExternalLinkModal(this.plugin).open());
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Edit Categories')
            .onClick(() => this.editCategories());
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Edit Tags')
            .onClick(() => this.editTags());
        this.searchInput = new obsidian.TextComponent(topBar)
            .setPlaceholder('Search entries...')
            .onChange(() => this.updateTable());
        this.categorySelect = new obsidian.DropdownComponent(topBar)
            .addOption('all', 'All Categories')
            .onChange(() => this.updateTable());
        this.tagSelect = new obsidian.DropdownComponent(topBar)
            .addOption('all', 'All Tags')
            .onChange(() => this.updateTable());
        new obsidian.ButtonComponent(topBar)
            .setButtonText('Clear Filters')
            .onClick(() => this.clearFilters());
    }
    createDropZone(containerEl) {
        this.dropZone = containerEl.createEl('div', { text: 'Drop files or URLs here', cls: 'drop-zone' });
        this.dropZone.addEventListener('dragover', this.handleDragOver.bind(this));
        this.dropZone.addEventListener('dragleave', this.handleDragLeave.bind(this));
        this.dropZone.addEventListener('drop', this.handleDrop.bind(this));
    }
    createTable(containerEl) {
        this.tableView = containerEl.createEl('table', { cls: 'dms-table' });
        this.updateTable();
    }
    updateTable() {
        const searchTerm = this.searchInput.getValue().toLowerCase();
        const selectedCategory = this.categorySelect.getValue();
        const selectedTag = this.tagSelect.getValue();
        const filteredEntries = this.plugin.externalLinkService.getAllExternalLinks().filter(entry => (searchTerm === '' || this.entryMatchesSearch(entry, searchTerm)) &&
            (selectedCategory === 'all' || entry.category === selectedCategory) &&
            (selectedTag === 'all' || entry.tags.includes(selectedTag)));
        this.renderEntries(filteredEntries);
    }
    entryMatchesSearch(entry, searchTerm) {
        return entry.title.toLowerCase().includes(searchTerm) ||
            entry.path.toLowerCase().includes(searchTerm) ||
            entry.summary.toLowerCase().includes(searchTerm) ||
            entry.category.toLowerCase().includes(searchTerm) ||
            entry.tags.some(tag => tag.toLowerCase().includes(searchTerm)) ||
            entry.audience.some(aud => aud.toLowerCase().includes(searchTerm));
    }
    renderEntries(entries) {
        this.tableView.empty();
        const header = this.tableView.createEl('thead').createEl('tr');
        ['Title', 'Summary', 'File Type', 'Size', 'Created Date', 'Categories', 'Tags', 'Audience', 'Actions'].forEach(text => {
            header.createEl('th', { text });
        });
        const tbody = this.tableView.createEl('tbody');
        entries.forEach(entry => this.renderEntry(tbody, entry));
    }
    renderEntry(tbody, entry) {
        const row = tbody.createEl('tr');
        const titleCell = row.createEl('td');
        const titleLink = titleCell.createEl('a', { text: entry.title });
        titleLink.addEventListener('click', (e) => {
            e.preventDefault();
            this.plugin.externalLinkService.openExternalFile(entry.path);
        });
        row.createEl('td', { text: entry.summary });
        row.createEl('td', { text: entry.fileType });
        row.createEl('td', { text: entry.size ? `${entry.size} bytes` : '' });
        row.createEl('td', { text: new Date(entry.createdDate).toLocaleDateString() });
        row.createEl('td', { text: entry.category });
        row.createEl('td', { text: entry.tags.join(', ') });
        row.createEl('td', { text: entry.audience.join(', ') });
        const actionsCell = row.createEl('td');
        new obsidian.ButtonComponent(actionsCell)
            .setButtonText('Edit')
            .onClick(() => new AddExternalLinkModal(this.plugin, entry).open());
        new obsidian.ButtonComponent(actionsCell)
            .setButtonText('Delete')
            .onClick(() => this.deleteEntry(entry));
        new obsidian.ButtonComponent(actionsCell)
            .setButtonText('Copy Path')
            .onClick(() => this.copyPath(entry.path));
    }
    editCategories() {
        return __awaiter(this, void 0, void 0, function* () {
            // Implement category editing functionality
            // This should open a modal to edit categories
        });
    }
    editTags() {
        return __awaiter(this, void 0, void 0, function* () {
            // Implement tag editing functionality
            // This should open a modal to edit tags
        });
    }
    clearFilters() {
        this.searchInput.setValue('');
        this.categorySelect.setValue('all');
        this.tagSelect.setValue('all');
        this.updateTable();
    }
    handleDragOver(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dropZone.addClass('drag-over');
    }
    handleDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        this.dropZone.removeClass('drag-over');
    }
    handleDrop(event) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            event.preventDefault();
            event.stopPropagation();
            this.dropZone.removeClass('drag-over');
            const items = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.items;
            if (items) {
                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    if (item.kind === 'file') {
                        const file = item.getAsFile();
                        if (file) {
                            yield this.addFileEntry(file);
                        }
                    }
                    else if (item.kind === 'string' && item.type === 'text/uri-list') {
                        item.getAsString((url) => __awaiter(this, void 0, void 0, function* () {
                            yield this.addUrlEntry(url);
                        }));
                    }
                }
            }
        });
    }
    addFileEntry(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const filePath = file.name; // We'll use the file name as the path for proxy notes
            const entry = {
                title: file.name,
                path: filePath,
                fileType: file.type || this.detectFileType(file.name),
                audience: [],
                summary: `File: ${file.name}`,
                category: '',
                tags: [],
                createdDate: file.lastModified,
                size: file.size,
                notes: ''
            };
            yield this.plugin.externalLinkService.addExternalLink(entry);
            this.updateTable();
        });
    }
    detectFileType(fileName) {
        var _a;
        const extension = (_a = fileName.split('.').pop()) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        const mimeMap = {
            'pdf': 'application/pdf',
            'doc': 'application/msword',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'xls': 'application/vnd.ms-excel',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'ppt': 'application/vnd.ms-powerpoint',
            'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            'txt': 'text/plain',
            'csv': 'text/csv',
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'gif': 'image/gif',
            'svg': 'image/svg+xml',
            'mp3': 'audio/mpeg',
            'mp4': 'video/mp4',
            // Add more mappings as needed
        };
        return extension ? (mimeMap[extension] || 'application/octet-stream') : 'application/octet-stream';
    }
    addUrlEntry(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const entry = {
                title: new URL(url).hostname,
                path: url,
                fileType: 'text/uri-list',
                audience: [],
                summary: 'Dropped URL',
                category: 'URL',
                tags: ['web'],
                createdDate: Date.now(),
                size: 0,
                notes: ''
            };
            yield this.plugin.externalLinkService.addExternalLink(entry);
            this.updateTable();
        });
    }
    deleteEntry(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.plugin.externalLinkService.deleteExternalLink(entry);
            this.updateTable();
        });
    }
    copyPath(path) {
        navigator.clipboard.writeText(path);
        // Optionally, show a notification that the path was copied
    }
}

const sanitizeFilePath = (path) => {
    // Replace backslashes with forward slashes
    path = path.replace(/\\/g, '/');
    // Remove any duplicated slashes (except for the double slash after the colon)
    path = path.replace(/([^:])\/+/g, '$1/');
    // Encode only specific characters
    return path.replace(/%/g, '%25')
        .replace(/\s/g, '%20')
        .replace(/\(/g, '%28')
        .replace(/\)/g, '%29');
};
function isErrorWithMessage(error) {
    return (typeof error === 'object' &&
        error !== null &&
        'message' in error &&
        typeof error.message === 'string');
}
function toErrorWithMessage(maybeError) {
    if (isErrorWithMessage(maybeError))
        return maybeError;
    try {
        return new Error(JSON.stringify(maybeError));
    }
    catch (_a) {
        // fallback in case there's an error stringifying the maybeError
        // like with circular references for example.
        return new Error(String(maybeError));
    }
}
function getErrorMessage(error) {
    return toErrorWithMessage(error).message;
}

class ExternalLinkService {
    constructor(plugin, settings) {
        this.externalLinks = [];
        this.plugin = plugin;
        this.app = plugin.app;
        this.settings = settings;
    }
    loadExternalLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const data = yield this.plugin.loadData();
                this.externalLinks = (data === null || data === void 0 ? void 0 : data.externalLinks) || [];
            }
            catch (error) {
                console.error('Failed to load external links:', getErrorMessage(error));
                new obsidian.Notice('Failed to load external links. Check the console for details.');
            }
        });
    }
    saveExternalLinks() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.plugin.saveData({ externalLinks: this.externalLinks });
            }
            catch (error) {
                console.error('Failed to save external links:', getErrorMessage(error));
                new obsidian.Notice('Failed to save external links. Check the console for details.');
            }
        });
    }
    getAllExternalLinks() {
        return this.externalLinks;
    }
    getExternalLink(index) {
        return this.externalLinks[index];
    }
    addExternalLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            this.externalLinks.push(link);
            yield this.saveExternalLinks();
            yield this.createProxyNote(link);
        });
    }
    editExternalLink(oldLink, updatedLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const index = this.externalLinks.findIndex(link => link.path === oldLink.path);
            if (index !== -1) {
                this.externalLinks[index] = updatedLink;
                yield this.saveExternalLinks();
                yield this.createProxyNote(updatedLink);
            }
        });
    }
    deleteExternalLink(link) {
        return __awaiter(this, void 0, void 0, function* () {
            this.externalLinks = this.externalLinks.filter(l => l.path !== link.path);
            yield this.saveExternalLinks();
            yield this.deleteProxyNote(link);
        });
    }
    createProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesFolder}/${fileName}`;
            const content = `---
title: ${link.title}
url: ${link.path}
fileType: ${link.fileType}
audience: ${link.audience.join(', ')}
category: ${link.category}
tags: ${link.tags.join(', ')}
createdDate: ${new Date(link.createdDate).toISOString()}
size: ${link.size}
---

${link.summary}

${link.notes}`;
            try {
                yield this.app.vault.create(filePath, content);
            }
            catch (error) {
                console.error('Failed to create proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to create proxy note. Check the console for details.');
            }
        });
    }
    deleteProxyNote(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const fileName = sanitizeFilePath(`${link.title}.md`);
            const filePath = `${this.settings.proxyNotesFolder}/${fileName}`;
            try {
                const file = this.app.vault.getAbstractFileByPath(filePath);
                if (file instanceof obsidian.TFile) {
                    yield this.app.vault.delete(file);
                }
            }
            catch (error) {
                console.error('Failed to delete proxy note:', getErrorMessage(error));
                new obsidian.Notice('Failed to delete proxy note. Check the console for details.');
            }
        });
    }
    getCategories() {
        return Array.from(new Set(this.externalLinks.map(link => link.category)));
    }
    getTags() {
        return Array.from(new Set(this.externalLinks.flatMap(link => link.tags)));
    }
    addNewTag(tag) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const link of this.externalLinks) {
                if (!link.tags.includes(tag)) {
                    link.tags.push(tag);
                    yield this.createProxyNote(link);
                }
            }
            yield this.saveExternalLinks();
        });
    }
    openExternalFile(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const link = this.externalLinks.find(l => l.path === path);
            if (link) {
                if (link.path.startsWith('http://') || link.path.startsWith('https://')) {
                    // For web URLs
                    window.open(link.path, '_blank');
                }
                else {
                    // For local file paths
                    const sanitizedPath = this.sanitizeFilePath(link.path);
                    const encodedPath = encodeURI(`file://${sanitizedPath}`);
                    window.open(encodedPath, '_blank');
                }
            }
            else {
                new obsidian.Notice('External link not found');
            }
        });
    }
    sanitizeFilePath(path) {
        // Replace backslashes with forward slashes
        path = path.replace(/\\/g, '/');
        // Remove any duplicated slashes (except for the double slash after the colon)
        path = path.replace(/([^:])\/+/g, '$1/');
        // Encode only specific characters
        return path.replace(/%/g, '%25')
            .replace(/\s/g, '%20')
            .replace(/\(/g, '%28')
            .replace(/\)/g, '%29');
    }
}

const DEFAULT_SETTINGS = {
    proxyNotesFolder: 'DMS Proxy Notes',
    defaultFolder: 'DMS',
    // Add any other default settings here
};

class DMSSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'DMS Settings' });
        new obsidian.Setting(containerEl)
            .setName('Proxy Notes Folder')
            .setDesc('Folder where proxy notes will be stored')
            .addText(text => text
            .setPlaceholder('Enter folder path')
            .setValue(this.plugin.settings.proxyNotesFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.proxyNotesFolder = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Default Folder')
            .setDesc('Default folder for new external links')
            .addText(text => text
            .setPlaceholder('Enter folder path')
            .setValue(this.plugin.settings.defaultFolder)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.defaultFolder = value;
            yield this.plugin.saveSettings();
        })));
        // Add more settings as needed
    }
}

class DMSPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.dmsView = null;
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.externalLinkService = new ExternalLinkService(this, this.settings);
            this.addCommand({
                id: 'open-dms-view',
                name: 'Open DMS View',
                callback: () => this.activateView(),
            });
            this.registerView('dms-view', (leaf) => {
                this.dmsView = new DMSView(leaf, this);
                return this.dmsView;
            });
            this.registerMarkdownPostProcessor((el, ctx) => this.postprocessor(el, ctx));
            this.addSettingTab(new DMSSettingTab(this.app, this));
            yield this.externalLinkService.loadExternalLinks();
            yield this.ensureProxyNotesFolderExists();
            // Activate the view on plugin load
            this.activateView();
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    activateView() {
        return __awaiter(this, void 0, void 0, function* () {
            const { workspace } = this.app;
            let leaf = workspace.getLeavesOfType('dms-view')[0];
            if (!leaf) {
                leaf = workspace.getRightLeaf(false);
                yield leaf.setViewState({ type: 'dms-view', active: true });
            }
            workspace.revealLeaf(leaf);
            if (this.dmsView) {
                this.dmsView.updateTable();
            }
        });
    }
    postprocessor(el, ctx) {
        // Implementation here
        // This method can be used to process markdown content and add custom behavior
        // For example, you could look for specific patterns and replace them with interactive elements
    }
    ensureProxyNotesFolderExists() {
        return __awaiter(this, void 0, void 0, function* () {
            const folderPath = this.settings.proxyNotesFolder;
            if (!(yield this.app.vault.adapter.exists(folderPath))) {
                yield this.app.vault.createFolder(folderPath);
            }
        });
    }
    updateDMSView() {
        if (this.dmsView) {
            this.dmsView.updateTable();
        }
    }
    addNewTag(tag) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.externalLinkService.addNewTag(tag);
            this.updateDMSView();
        });
    }
}

module.exports = DMSPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
